{"abi":[{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/forge-std/src/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","forge-std/=lib/forge-std/src/","hardhat/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236","urls":["bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02","dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":12254,"exportedSymbols":{"ReentrancyGuard":[12253]},"nodeType":"SourceUnit","src":"109:3131:30","nodes":[{"id":12186,"nodeType":"PragmaDirective","src":"109:24:30","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":12253,"nodeType":"ContractDefinition","src":"886:2353:30","nodes":[{"id":12190,"nodeType":"VariableDeclaration","src":"1674:40:30","nodes":[],"constant":true,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:30","scope":12253,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":12189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":12193,"nodeType":"VariableDeclaration","src":"1720:36:30","nodes":[],"constant":true,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:30","scope":12253,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":12192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":12195,"nodeType":"VariableDeclaration","src":"1763:23:30","nodes":[],"constant":false,"mutability":"mutable","name":"_status","nameLocation":"1779:7:30","scope":12253,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12194,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":12198,"nodeType":"ErrorDefinition","src":"1850:37:30","nodes":[],"documentation":{"id":12196,"nodeType":"StructuredDocumentation","src":"1793:52:30","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:30","parameters":{"id":12197,"nodeType":"ParameterList","parameters":[],"src":"1884:2:30"}},{"id":12206,"nodeType":"FunctionDefinition","src":"1893:52:30","nodes":[],"body":{"id":12205,"nodeType":"Block","src":"1907:38:30","nodes":[],"statements":[{"expression":{"id":12203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":12201,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12195,"src":"1917:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":12202,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12190,"src":"1927:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12204,"nodeType":"ExpressionStatement","src":"1917:21:30"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":12199,"nodeType":"ParameterList","parameters":[],"src":"1904:2:30"},"returnParameters":{"id":12200,"nodeType":"ParameterList","parameters":[],"src":"1907:0:30"},"scope":12253,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":12217,"nodeType":"ModifierDefinition","src":"2322:103:30","nodes":[],"body":{"id":12216,"nodeType":"Block","src":"2346:79:30","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":12209,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12233,"src":"2356:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":12210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":12211,"nodeType":"ExpressionStatement","src":"2356:21:30"},{"id":12212,"nodeType":"PlaceholderStatement","src":"2387:1:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":12213,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12241,"src":"2398:18:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":12214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":12215,"nodeType":"ExpressionStatement","src":"2398:20:30"}]},"documentation":{"id":12207,"nodeType":"StructuredDocumentation","src":"1951:366:30","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"name":"nonReentrant","nameLocation":"2331:12:30","parameters":{"id":12208,"nodeType":"ParameterList","parameters":[],"src":"2343:2:30"},"virtual":false,"visibility":"internal"},{"id":12233,"nodeType":"FunctionDefinition","src":"2431:307:30","nodes":[],"body":{"id":12232,"nodeType":"Block","src":"2470:268:30","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":12222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":12220,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12195,"src":"2558:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":12221,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12193,"src":"2569:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":12227,"nodeType":"IfStatement","src":"2554:86:30","trueBody":{"id":12226,"nodeType":"Block","src":"2578:62:30","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":12223,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12198,"src":"2599:28:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":12224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":12225,"nodeType":"RevertStatement","src":"2592:37:30"}]}},{"expression":{"id":12230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":12228,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12195,"src":"2714:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":12229,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12193,"src":"2724:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12231,"nodeType":"ExpressionStatement","src":"2714:17:30"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:30","parameters":{"id":12218,"nodeType":"ParameterList","parameters":[],"src":"2459:2:30"},"returnParameters":{"id":12219,"nodeType":"ParameterList","parameters":[],"src":"2470:0:30"},"scope":12253,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":12241,"nodeType":"FunctionDefinition","src":"2744:208:30","nodes":[],"body":{"id":12240,"nodeType":"Block","src":"2782:170:30","nodes":[],"statements":[{"expression":{"id":12238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":12236,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12195,"src":"2924:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":12237,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12190,"src":"2934:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12239,"nodeType":"ExpressionStatement","src":"2924:21:30"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:30","parameters":{"id":12234,"nodeType":"ParameterList","parameters":[],"src":"2771:2:30"},"returnParameters":{"id":12235,"nodeType":"ParameterList","parameters":[],"src":"2782:0:30"},"scope":12253,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":12252,"nodeType":"FunctionDefinition","src":"3131:106:30","nodes":[],"body":{"id":12251,"nodeType":"Block","src":"3195:42:30","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":12249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":12247,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12195,"src":"3212:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":12248,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12193,"src":"3223:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":12246,"id":12250,"nodeType":"Return","src":"3205:25:30"}]},"documentation":{"id":12242,"nodeType":"StructuredDocumentation","src":"2958:168:30","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:30","parameters":{"id":12243,"nodeType":"ParameterList","parameters":[],"src":"3163:2:30"},"returnParameters":{"id":12246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12252,"src":"3189:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12244,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:30"},"scope":12253,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":12187,"nodeType":"StructuredDocumentation","src":"135:750:30","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[12253],"name":"ReentrancyGuard","nameLocation":"904:15:30","scope":12254,"usedErrors":[12198],"usedEvents":[]}],"license":"MIT"},"id":30}